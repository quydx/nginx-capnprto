-- Generated by lua-capnproto 0.1.3-1 on Mon Apr 23 03:42:18 2018
-- https://github.com/cloudflare/lua-capnproto.git


local ffi = require "ffi"
local capnp = require "capnp"
local bit = require "bit"

local ceil              = math.ceil
local write_struct_field= capnp.write_struct_field
local read_struct_field = capnp.read_struct_field
local read_text         = capnp.read_text
local write_text        = capnp.write_text
local get_enum_val      = capnp.get_enum_val
local get_enum_name     = capnp.get_enum_name
local get_data_off      = capnp.get_data_off
local write_listp_buf   = capnp.write_listp_buf
local write_structp_buf = capnp.write_structp_buf
local write_structp     = capnp.write_structp
local read_struct_buf   = capnp.read_struct_buf
local read_listp_struct = capnp.read_listp_struct
local read_list_data    = capnp.read_list_data
local write_list        = capnp.write_list
local write_list_data   = capnp.write_list_data
local ffi_new           = ffi.new
local ffi_string        = ffi.string
local ffi_cast          = ffi.cast
local ffi_copy          = ffi.copy
local ffi_fill          = ffi.fill
local ffi_typeof        = ffi.typeof
local band, bor, bxor = bit.band, bit.bor, bit.bxor

local pint8    = ffi_typeof("int8_t *")
local pint16   = ffi_typeof("int16_t *")
local pint32   = ffi_typeof("int32_t *")
local pint64   = ffi_typeof("int64_t *")
local puint8   = ffi_typeof("uint8_t *")
local puint16  = ffi_typeof("uint16_t *")
local puint32  = ffi_typeof("uint32_t *")
local puint64  = ffi_typeof("uint64_t *")
local pbool    = ffi_typeof("uint8_t *")
local pfloat32 = ffi_typeof("float *")
local pfloat64 = ffi_typeof("double *")


local ok, new_tab = pcall(require, "table.new")

if not ok then
    new_tab = function (narr, nrec) return {} end
end

local round8 = function(size)
    return ceil(size / 8) * 8
end

local str_buf
local default_segment_size = 4096

local function get_str_buf(size)
    if size > default_segment_size then
        return ffi_new("char[?]", size)
    end

    if not str_buf then
        str_buf = ffi_new("char[?]", default_segment_size)
    end
    return str_buf
end

-- Estimated from #nodes, not accurate
local _M = new_tab(0, 6)


_M.Person = {
    id = "17103488608928808786",
    displayName = "AddressBook.capnp:Person",
    dataWordCount = 1,
    pointerCount = 4,
    discriminantCount = 0,
    discriminantOffset = 0,
    field_count = 5,

    fields = {
        { name = "id", default = 0, ["type"] = "uint32" },
        { name = "name", default = "", ["type"] = "text" },
        { name = "email", default = "", ["type"] = "text" },
        { name = "phones", default = "opaque pointer", ["type"] = "list" },
        { name = "employment", default = Nil, ["type"] = "group" },
    },

    calc_size_struct = function(data)
        local size = 40
        local value
        -- text
        value = data["name"]
        if type(value) == "string" then
            -- size 1, including trailing NULL
            size = size + round8(#value + 1)
        end
        -- text
        value = data["email"]
        if type(value) == "string" then
            -- size 1, including trailing NULL
            size = size + round8(#value + 1)
        end
        -- list
        if data["phones"] and type(data["phones"]) == "table" then
            size = size + 8
            local num2 = #data["phones"]
            for i2=1, num2 do
                size = size + _M.Person.PhoneNumber.calc_size_struct(data["phones"][i2])
            end
        end
        -- struct
        value = data["employment"]
        if type(value) == "table" then
            size = size + _M.Person.employment.calc_size_struct(value)
        end
        return size
    end,

    calc_size = function(data)
        local size = 16 -- header + root struct pointer
        return size + _M.Person.calc_size_struct(data)
    end,

    flat_serialize = function(data, p32, pos)
        pos = pos and pos or 40 -- struct size in bytes
        local start = pos
        local dscrm
        local value

        value = data["id"]
        local data_type = type(value)
        if (data_type == "number"
                or data_type == "boolean" ) then

            write_struct_field(p32, value, "uint32", 32, 0, 0)
        end

        value = data["name"]
        if type(value) == "string" then
            local data_off = get_data_off(_M.Person, 0, pos)

            local len = #value + 1
            write_listp_buf(p32, _M.Person, 0, 2, len, data_off)

            ffi_copy(p32 + pos / 4, value)
            pos = pos + round8(len)
        end

        value = data["email"]
        if type(value) == "string" then
            local data_off = get_data_off(_M.Person, 1, pos)

            local len = #value + 1
            write_listp_buf(p32, _M.Person, 1, 2, len, data_off)

            ffi_copy(p32 + pos / 4, value)
            pos = pos + round8(len)
        end

        value = data["phones"]
        if type(value) == "table" then
            local data_off = get_data_off(_M.Person, 2, pos)
            pos = pos + write_list(p32 + _M.Person.dataWordCount * 2 + 2 * 2,
                    value, (data_off + 1) * 8, "list", "struct", _M.Person.PhoneNumber)
        end

        value = data["employment"]
        if type(value) == "table" then
            -- groups are just namespaces, field offsets are set within parent
            -- structs
            pos = pos + _M.Person.employment.flat_serialize(value, p32, pos) - 40
        end

        return pos - start + 40
    end,

    serialize = function(data, p8, size)
        if not p8 then
            size = _M.Person.calc_size(data)

            p8 = get_str_buf(size)
        end
        ffi_fill(p8, size)
        local p32 = ffi_cast(puint32, p8)

        -- Because needed size has been calculated, only 1 segment is needed
        p32[0] = 0
        p32[1] = (size - 8) / 8

        -- skip header
        write_structp(p32 + 2, _M.Person, 0)

        -- skip header & struct pointer
        _M.Person.flat_serialize(data, p32 + 4)

        return ffi_string(p8, size)
    end,

    parse_struct_data = function(p32, data_word_count, pointer_count, header,
            tab)

        local s = tab

        s["id"] = read_struct_field(p32, "uint32", 32, 0, 0)

        -- text
        local off, size, num = read_listp_struct(p32, header, _M.Person, 0)
        if off and num then
            -- dataWordCount + offset + pointerSize + off
            local p8 = ffi_cast(pint8, p32 + (1 + 0 + 1 + off) * 2)
            s["name"] = ffi_string(p8, num - 1)
        else
            s["name"] = nil
        end

        -- text
        local off, size, num = read_listp_struct(p32, header, _M.Person, 1)
        if off and num then
            -- dataWordCount + offset + pointerSize + off
            local p8 = ffi_cast(pint8, p32 + (1 + 1 + 1 + off) * 2)
            s["email"] = ffi_string(p8, num - 1)
        else
            s["email"] = nil
        end

        -- list
        local off, size, num = read_listp_struct(p32, header, _M.Person, 2)
        if off and num then
            -- dataWordCount + offset + pointerSize + off
            s["phones"] = read_list_data(p32 + (1 + 2 + 1 + off) * 2, header,
                    num, "struct", _M.Person.PhoneNumber)
        else
            s["phones"] = nil
        end

        -- group
        if not s["employment"] then
            s["employment"] = new_tab(0, 4)
        end
        _M.Person["employment"].parse_struct_data(p32, _M.Person.dataWordCount,
                _M.Person.pointerCount, header, s["employment"])

        return s
    end,

    parse = function(bin, tab)
        if #bin < 16 then
            return nil, "message too short"
        end

        local header = new_tab(0, 4)
        local p32 = ffi_cast(puint32, bin)
        header.base = p32

        local nsegs = p32[0] + 1
        header.seg_sizes = {}
        for i=1, nsegs do
            header.seg_sizes[i] = p32[i]
        end
        local pos = round8(4 + nsegs * 4)
        header.header_size = pos / 8
        p32 = p32 + pos / 4

        if not tab then
            tab = new_tab(0, 8)
        end
        local off, dw, pw = read_struct_buf(p32, header)
        if off and dw and pw then
            return _M.Person.parse_struct_data(p32 + 2 + off * 2, dw, pw,
                    header, tab)
        else
            return nil
        end
    end,

}

_M.Person.PhoneNumber = {
    id = "15459545962285174881",
    displayName = "AddressBook.capnp:Person.PhoneNumber",
    dataWordCount = 1,
    pointerCount = 1,
    discriminantCount = 0,
    discriminantOffset = 0,
    field_count = 2,

    fields = {
        { name = "number", default = "", ["type"] = "text" },
        { name = "type", default = "mobile", ["type"] = "enum" },
    },

    calc_size_struct = function(data)
        local size = 16
        local value
        -- text
        value = data["number"]
        if type(value) == "string" then
            -- size 1, including trailing NULL
            size = size + round8(#value + 1)
        end
        return size
    end,

    calc_size = function(data)
        local size = 16 -- header + root struct pointer
        return size + _M.Person.PhoneNumber.calc_size_struct(data)
    end,

    flat_serialize = function(data, p32, pos)
        pos = pos and pos or 16 -- struct size in bytes
        local start = pos
        local dscrm
        local value

        value = data["number"]
        if type(value) == "string" then
            local data_off = get_data_off(_M.Person.PhoneNumber, 0, pos)

            local len = #value + 1
            write_listp_buf(p32, _M.Person.PhoneNumber, 0, 2, len, data_off)

            ffi_copy(p32 + pos / 4, value)
            pos = pos + round8(len)
        end

        value = data["type"]
        if type(value) == "string" or type(value) == "number" then
            local val = get_enum_val(value, 0, _M.Person.PhoneNumber.Type, "Person.PhoneNumber.type")
            write_struct_field(p32, val, "uint16", 16, 0)
        end
        return pos - start + 16
    end,

    serialize = function(data, p8, size)
        if not p8 then
            size = _M.Person.PhoneNumber.calc_size(data)

            p8 = get_str_buf(size)
        end
        ffi_fill(p8, size)
        local p32 = ffi_cast(puint32, p8)

        -- Because needed size has been calculated, only 1 segment is needed
        p32[0] = 0
        p32[1] = (size - 8) / 8

        -- skip header
        write_structp(p32 + 2, _M.Person.PhoneNumber, 0)

        -- skip header & struct pointer
        _M.Person.PhoneNumber.flat_serialize(data, p32 + 4)

        return ffi_string(p8, size)
    end,

    parse_struct_data = function(p32, data_word_count, pointer_count, header,
            tab)

        local s = tab

        -- text
        local off, size, num = read_listp_struct(p32, header, _M.Person.PhoneNumber, 0)
        if off and num then
            -- dataWordCount + offset + pointerSize + off
            local p8 = ffi_cast(pint8, p32 + (1 + 0 + 1 + off) * 2)
            s["number"] = ffi_string(p8, num - 1)
        else
            s["number"] = nil
        end

        -- enum
        local val = read_struct_field(p32, "uint16", 16, 0)
        s["type"] = get_enum_name(val, 0, _M.Person.PhoneNumber.TypeStr)

        return s
    end,

    parse = function(bin, tab)
        if #bin < 16 then
            return nil, "message too short"
        end

        local header = new_tab(0, 4)
        local p32 = ffi_cast(puint32, bin)
        header.base = p32

        local nsegs = p32[0] + 1
        header.seg_sizes = {}
        for i=1, nsegs do
            header.seg_sizes[i] = p32[i]
        end
        local pos = round8(4 + nsegs * 4)
        header.header_size = pos / 8
        p32 = p32 + pos / 4

        if not tab then
            tab = new_tab(0, 8)
        end
        local off, dw, pw = read_struct_buf(p32, header)
        if off and dw and pw then
            return _M.Person.PhoneNumber.parse_struct_data(p32 + 2 + off * 2, dw, pw,
                    header, tab)
        else
            return nil
        end
    end,

}

_M.Person.PhoneNumber.Type = {
    ["MOBILE"] = 0,
    ["HOME"] = 1,
    ["WORK"] = 2,

}

_M.Person.PhoneNumber.TypeStr = {
    [0] = "MOBILE",
    [1] = "HOME",
    [2] = "WORK",

}

_M.Person.employment = {
    id = "10443343978408683003",
    displayName = "AddressBook.capnp:Person.employment",
    dataWordCount = 1,
    pointerCount = 4,
    discriminantCount = 4,
    discriminantOffset = 2,
    isGroup = true,
    field_count = 4,

    fields = {
        { name = "unemployed", default = "Void", ["type"] = "void" },
        { name = "employer", default = "", ["type"] = "text" },
        { name = "school", default = "", ["type"] = "text" },
        { name = "self_employed", default = "Void", ["type"] = "void" },
    },

    calc_size_struct = function(data)
        local size = 0
        local value
        -- text
        value = data["employer"]
        if type(value) == "string" then
            -- size 1, including trailing NULL
            size = size + round8(#value + 1)
        end
        -- text
        value = data["school"]
        if type(value) == "string" then
            -- size 1, including trailing NULL
            size = size + round8(#value + 1)
        end
        return size
    end,

    calc_size = function(data)
        local size = 16 -- header + root struct pointer
        return size + _M.Person.employment.calc_size_struct(data)
    end,

    flat_serialize = function(data, p32, pos)
        pos = pos and pos or 40 -- struct size in bytes
        local start = pos
        local dscrm
        local value

        value = data["unemployed"]
        if value then
            dscrm = 0
        end


        value = data["employer"]
        if value then
            dscrm = 1
        end

        if type(value) == "string" then
            local data_off = get_data_off(_M.Person.employment, 3, pos)

            local len = #value + 1
            write_listp_buf(p32, _M.Person.employment, 3, 2, len, data_off)

            ffi_copy(p32 + pos / 4, value)
            pos = pos + round8(len)
        end

        value = data["school"]
        if value then
            dscrm = 2
        end

        if type(value) == "string" then
            local data_off = get_data_off(_M.Person.employment, 3, pos)

            local len = #value + 1
            write_listp_buf(p32, _M.Person.employment, 3, 2, len, data_off)

            ffi_copy(p32 + pos / 4, value)
            pos = pos + round8(len)
        end

        value = data["self_employed"]
        if value then
            dscrm = 3
        end

        if dscrm then
            --buf, discriminantOffset, discriminantValue
            _M.Person.employment.which(p32, 2, dscrm)
        end

        return pos - start + 40
    end,

    which = function(buf, offset, n)
        if n then
            -- set value
            write_struct_field(buf, n, "uint16", 16, offset)
        else
            -- get value
            return read_struct_field(buf, "uint16", 16, offset)
        end
    end,

    parse_struct_data = function(p32, data_word_count, pointer_count, header,
            tab)

        local s = tab

        local dscrm = _M.Person.employment.which(p32, 2)
        -- union
        if dscrm == 0 then

        s["unemployed"] = "Void"
        else
            s["unemployed"] = nil
        end

        -- union
        if dscrm == 1 then

        -- text
        local off, size, num = read_listp_struct(p32, header, _M.Person.employment, 3)
        if off and num then
            -- dataWordCount + offset + pointerSize + off
            local p8 = ffi_cast(pint8, p32 + (1 + 3 + 1 + off) * 2)
            s["employer"] = ffi_string(p8, num - 1)
        else
            s["employer"] = nil
        end

        else
            s["employer"] = nil
        end

        -- union
        if dscrm == 2 then

        -- text
        local off, size, num = read_listp_struct(p32, header, _M.Person.employment, 3)
        if off and num then
            -- dataWordCount + offset + pointerSize + off
            local p8 = ffi_cast(pint8, p32 + (1 + 3 + 1 + off) * 2)
            s["school"] = ffi_string(p8, num - 1)
        else
            s["school"] = nil
        end

        else
            s["school"] = nil
        end

        -- union
        if dscrm == 3 then

        s["self_employed"] = "Void"
        else
            s["self_employed"] = nil
        end

        return s
    end,

}

_M.AddressBook = {
    id = "14104423690559462989",
    displayName = "AddressBook.capnp:AddressBook",
    dataWordCount = 0,
    pointerCount = 1,
    discriminantCount = 0,
    discriminantOffset = 0,
    field_count = 1,

    fields = {
        { name = "people", default = "opaque pointer", ["type"] = "list" },
    },

    calc_size_struct = function(data)
        local size = 8
        local value
        -- list
        if data["people"] and type(data["people"]) == "table" then
            size = size + 8
            local num2 = #data["people"]
            for i2=1, num2 do
                size = size + _M.Person.calc_size_struct(data["people"][i2])
            end
        end
        return size
    end,

    calc_size = function(data)
        local size = 16 -- header + root struct pointer
        return size + _M.AddressBook.calc_size_struct(data)
    end,

    flat_serialize = function(data, p32, pos)
        pos = pos and pos or 8 -- struct size in bytes
        local start = pos
        local dscrm
        local value

        value = data["people"]
        if type(value) == "table" then
            local data_off = get_data_off(_M.AddressBook, 0, pos)
            pos = pos + write_list(p32 + _M.AddressBook.dataWordCount * 2 + 0 * 2,
                    value, (data_off + 1) * 8, "list", "struct", _M.Person)
        end
        return pos - start + 8
    end,

    serialize = function(data, p8, size)
        if not p8 then
            size = _M.AddressBook.calc_size(data)

            p8 = get_str_buf(size)
        end
        ffi_fill(p8, size)
        local p32 = ffi_cast(puint32, p8)

        -- Because needed size has been calculated, only 1 segment is needed
        p32[0] = 0
        p32[1] = (size - 8) / 8

        -- skip header
        write_structp(p32 + 2, _M.AddressBook, 0)

        -- skip header & struct pointer
        _M.AddressBook.flat_serialize(data, p32 + 4)

        return ffi_string(p8, size)
    end,

    parse_struct_data = function(p32, data_word_count, pointer_count, header,
            tab)

        local s = tab

        -- list
        local off, size, num = read_listp_struct(p32, header, _M.AddressBook, 0)
        if off and num then
            -- dataWordCount + offset + pointerSize + off
            s["people"] = read_list_data(p32 + (0 + 0 + 1 + off) * 2, header,
                    num, "struct", _M.Person)
        else
            s["people"] = nil
        end

        return s
    end,

    parse = function(bin, tab)
        if #bin < 16 then
            return nil, "message too short"
        end

        local header = new_tab(0, 4)
        local p32 = ffi_cast(puint32, bin)
        header.base = p32

        local nsegs = p32[0] + 1
        header.seg_sizes = {}
        for i=1, nsegs do
            header.seg_sizes[i] = p32[i]
        end
        local pos = round8(4 + nsegs * 4)
        header.header_size = pos / 8
        p32 = p32 + pos / 4

        if not tab then
            tab = new_tab(0, 8)
        end
        local off, dw, pw = read_struct_buf(p32, header)
        if off and dw and pw then
            return _M.AddressBook.parse_struct_data(p32 + 2 + off * 2, dw, pw,
                    header, tab)
        else
            return nil
        end
    end,

}

return _M
