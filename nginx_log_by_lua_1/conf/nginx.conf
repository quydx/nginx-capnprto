daemon         off;
worker_processes 2;

error_log /tmp/nginx_error.log warn;

events {
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
		      '$status $body_bytes_sent "$http_referer" '
		      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log  main;
    error_log	/var/log/nginx/error.log;
    # Lua configuration
    #lua_package_path    "$prefix/?.lua;;";
    lua_package_path	"/usr/share/lua/5.1/?.lua;;";
    lua_shared_dict     log_dict    1M;

    server {
        listen 8080;
	location /address {
	    content_by_lua_file main.lua;
	}
	location /haha {
	    content_by_lua_file test.lua;
	}
	location /tada {
	    default_type 'text/plain';
	    content_by_lua_file main.lua;
	}
	location / {
	    content_by_lua '
		local logs = require "Logs_capnp"
		local data = {
		    document = {
			{
			    id = 123,
			    host = "aaa",
			    uri = "tata",
			},
			{
			    id = 456,
			    host = "bbb",
			    uri = "tbtb",
			}
		    }
		}
		local bin = logs.Logs.serialize(data)
		local decoded = logs.Logs.parse(bin)
		ngx.say((cjson.encode(decoded)))
	    ';
	}

	location /test {
            # Replace with your web application
            content_by_lua '
		local data = {request={}, response={}}
		local req = data["request"]
		local res = data["response"]

		req["host"] = ngx.var.host
		req["uri"] = ngx.var.uri
		res["status"] = ngx.status
		res["duration"] = ngx.var.upstream_response_time
		
		
		ngx.say(req["host"])
            ';

            
            # this logging code can be added to any existing nginx.conf   
            log_by_lua '
                local logging = require("logging")

                local request_time = ngx.now() - ngx.req.start_time()
                logging.add_plot(ngx.shared.log_dict, "request_time", request_time)
           ';
        }
    }

    # log server - print the log generated by our web application
    server {
        
        listen 127.0.0.1:6080;

        location / {
            content_by_lua '
                local logging = require("logging")
                
                local count, avg, elapsed_time = 
                    logging.get_plot(ngx.shared.log_dict, "request_time")

                local qps = 0

                ngx.say("Since last measure:\t", elapsed_time, " secs")
                ngx.say("Request Count:\t\t", count)
                ngx.say("Average req time:\t", avg, " secs")
                if elapsed_time > 0 then
                    qps = count / elapsed_time
                end
                ngx.say("Requests per Secs:\t", qps)
            ';
        }
    }
}
